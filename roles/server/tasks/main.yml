---
- name: include assert
  ansible.builtin.include_tasks: assert.yml

- name: Include OS specific variables
  ansible.builtin.include_vars: "{{ lookup('ansible.builtin.first_found', params) }}"
  vars:
    params:
      files:
        - "os_{{ ansible_facts['distribution'] }}.yml"
        - "os_{{ ansible_facts['os_family'] }}.yml"
      paths:
        - 'vars'

- name: Install Samba packages
  ansible.builtin.package:
    name: "{{ samba_packages }}"
    state: present
  when: samba_packages is defined and samba_packages | length > 0
  tags: samba

- name: Install Samba VFS extensions packages
  ansible.builtin.package:
    name: "{{ samba_vfs_packages }}"
    state: present
  when: samba_vfs_packages is defined and samba_vfs_packages | length > 0
  tags: samba

- name: Register Samba version
  ansible.builtin.shell: >
    set -o nounset -o pipefail -o errexit &&
    /usr/sbin/smbd --version | sed 's/Version //'
  args:
    executable: /bin/bash
  register: samba_version
  changed_when: false
  check_mode: false
  tags: samba

- name: Create Samba shares root directory
  ansible.builtin.file:
    state: directory
    path: "{{ samba_shares_root }}"
    owner: root
    group: root
    mode: '0755'
  when: ( samba_shares is defined and samba_shares | length > 0 ) and
        ( samba_manage_directories is defined and samba_manage_directories | bool )
  tags: samba

- name: Create share directories
  ansible.builtin.file:
    state: directory
    path: "{{ item.path | default([samba_shares_root, item.name] | join('/')) }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('users') }}"
    mode: "{{ item.directory_mode | default('0775') }}"
    setype: "{{ item.setype | default(omit) }}"
  loop: "{{ samba_shares }}"
  when: ( samba_shares is defined and samba_shares | length > 0 ) and
        ( samba_manage_directories is defined and samba_manage_directories | bool )
  tags: samba

- name: Ensure webserver document root exists
  ansible.builtin.file:
    name: "{{ samba_www_documentroot }}"
    state: directory
    mode: '0755'
  when: samba_create_varwww_symlinks | bool
  tags: samba

- name: Create link to shares in webserver document root
  ansible.builtin.file:
    state: link
    path: "{{ samba_www_documentroot }}/{{ item.name }}"
    src: "{{ item.path | default([samba_shares_root, item.name] | join('/')) }}"
  loop: "{{ samba_shares }}"
  when: >
        ( samba_shares is defined and samba_shares | length > 0 ) and
        samba_create_varwww_symlinks | bool
  tags: samba

- name: Samba configuration
  ansible.builtin.template:
    dest: "{{ samba_configuration }}"
    src: smb.conf.j2
    validate: 'testparm -s %s'
    mode: '0644'
  notify:
    - Restart SMB service
    - Restart NMB service
  tags: samba

- name: Install global include file
  ansible.builtin.template:
    src: "{{ samba_global_include }}"
    dest: "{{ samba_configuration_dir }}"
    validate: 'testparm -s %s'
    mode: '0644'
  when: samba_global_include is defined and samba_global_include | length > 0
  notify:
    - Restart SMB service
    - Restart NMB service
  tags: samba

- name: Install home include file
  ansible.builtin.template:
    src: "{{ samba_homes_include }}"
    dest: "{{ samba_configuration_dir }}"
    validate: 'testparm -s %s'
    mode: '0644'
  when: samba_homes_include is defined and samba_homes_include | length > 0
  notify:
    - Restart SMB service
    - Restart NMB service
  tags: samba

- name: Install share specific include files
  ansible.builtin.template:
    src: "{{ item.include_file }}"
    dest: "{{ samba_configuration_dir }}"
    validate: 'testparm -s %s'
    mode: '0644'
  when: >
        ( samba_shares is defined and samba_shares | length > 0 ) and
        ( item.include_file is defined and item.include_file | length > 0 )
  loop: "{{ samba_shares }}"
  notify:
    - Restart SMB service
    - Restart NMB service
  tags: samba

- name: Create username map file if needed
  ansible.builtin.template:
    dest: "{{ samba_username_map_file }}"
    src: smbusers.j2
    mode: '0644'
  notify:
    - Restart SMB service
    - Restart NMB service
  when: samba_username_map is defined and samba_username_map | length > 0
  tags: samba

- name: Start SMB service
  ansible.builtin.service:
    name: "{{ smb_service }}"
    state: started
    enabled: true
  tags: samba

- name: Start NMB service
  ansible.builtin.service:
    name: "{{ nmb_service }}"
    state: started
    enabled: true
  tags: samba
  when: samba_enable_netbios | bool

- name: Create Samba users if they don't exist yet
  ansible.builtin.shell: >
    set -o nounset -o pipefail -o errexit &&
    (pdbedit --user={{ item.name }} 2>&1 > /dev/null) \
    || (echo '{{ item.password }}'; echo '{{ item.password }}') \
    | smbpasswd -s -a {{ item.name }}
  args:
    executable: /bin/bash
  no_log: true
  register: create_user_output
  loop: "{{ samba_users }}"
  when: samba_users is defined and samba_users | length > 0
  changed_when: "'Added user' in create_user_output.stdout"
  tags: samba

# this need to be installed before modification to fstab, because fstab.yml
# needs chacl tool installed
- name: include installation of acl tools
  ansible.builtin.include_tasks: acltools.yml
  when:
    - samba_acl_enabled | bool
  tags:
    - acl

- name: include modifications in fstab
  ansible.builtin.include_tasks: fstab.yml
  with_items: "{{ samba_acl_mountpoints }}"
  when:
    - samba_acl_enabled | bool
  tags:
    - acl

- name: include configuration of ACL
  ansible.builtin.include_tasks: acl.yml
  when:
    - samba_acl_enabled | bool
  tags:
    - acl
